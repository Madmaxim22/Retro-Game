import themes from './themes';
import Bowman from './characters/Bowman';
import Vampire from './characters/Vampire';
import Undead from './characters/Undead';
import Magician from './characters/Magician';
import Daemon from './characters/Daemon';
import Swordsman from './characters/Swordsman';
import { generateTeam } from './generators';
import PositionedCharacter from './PositionedCharacter';
import GamePlay from './GamePlay';
import GameState from './GameState';

// –ö–æ–º–∞–Ω–¥–∞ –∏–≥—Ä–æ–∫–∞
const playersTypes = [
  Bowman, Swordsman, Magician
];
// –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
const opponentTypes = [
  Daemon, Undead, Vampire
];

export default class GameController {
  constructor(gamePlay, stateService) {
    this.gamePlay = gamePlay;
    this.stateService = stateService;
    this.charactersMap = new Map();
    this.positionedCharacters = [];
    this.activeCharacter = -1;
    this.currentTurn = 'player'; // –∏–ª–∏ 'computer'
  }

  init() {
    // TODO: add event listeners to gamePlay events
    this.gamePlay.drawUi(themes.prairie);
    this.createTeamPositions();
    this.setupEventListeners();
    // TODO: load saved stated from stateService
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const savedState = this.stateService.load();
    if (savedState && savedState.nextTurn) {
      this.currentTurn = savedState.nextTurn;
    }

    this.saveGameState(); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  }

  setupEventListeners() {
    this.gamePlay.addCellEnterListener(this.onCellEnter);
    this.gamePlay.addCellLeaveListener(this.onCellLeave);
    this.gamePlay.addCellClickListener(this.onCellClick);
  }

  onCellClick = (index) => {
    // TODO: react to click
    const character = this.charactersMap.get(index);
    if (character && playersTypes.some((type) => character instanceof type)) {
      if (this.currentTurn !== 'player') {
        GamePlay.showError('–°–µ–π—á–∞—Å —Ö–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞');
        return;
      }
      this.gamePlay.selectCell(index);
      if (this.activeCharacter !== -1) {
        this.gamePlay.deselectCell(this.activeCharacter);
      }
      this.activeCharacter = index;
    } else {
      GamePlay.showError('–í—ã–±–µ—Ä–µ—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–≥—Ä–æ–∫–∞!');
    }
  };

  onCellEnter = (index) => {
    // TODO: react to mouse enter
    const character = this.charactersMap.get(index);
    if (character) {
      const info = this.formatCharacterInfo(character);
      this.gamePlay.showCellTooltip(info, index);
    } else {
      this.gamePlay.hideCellTooltip(index);
    }
  };

  onCellLeave = (index) => {
    // TODO: react to mouse leave
    this.gamePlay.hideCellTooltip(index);
  };

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ö–æ–¥–∞
  switchTurn() {
    this.currentTurn = this.currentTurn === 'player' ? 'computer' : 'player';
    this.saveGameState();
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  saveGameState() {
    const state = new GameState(this.currentTurn);
    this.stateService.save(state);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
  endPlayerTurn() {
    this.switchTurn();
    // –¢—É—Ç –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ö–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    if (this.currentTurn === 'computer') {
      this.performComputerMove();
    }
  }

  performComputerMove() {
    // –õ–æ–≥–∏–∫–∞ —Ö–æ–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
    // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ö–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ
    setTimeout(() => {
      // –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–º–ø—å—é—Ç–µ—Ä –¥–µ–ª–∞–µ—Ç —Å–≤–æ–π —Ö–æ–¥
      this.switchTurn(); // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–æ–¥ –∏–≥—Ä–æ–∫—É
    }, 1000);
  }

  formatCharacterInfo(character) {
    if (!character) return '';
    return `üéñ${character.level} ‚öî${character.attack} üõ°${character.defence} ‚ù§${character.health}`.trim();
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –∫–æ–º–∞–Ω–¥
  createTeamPositions() {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    const playersTeam = generateTeam(playersTypes, 1, 4).characters;
    const opponentTeam = generateTeam(opponentTypes, 1, 4).characters;

    const playersTeamPositions = this.getBorderColumnsIndices('first'); // –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
    const opponentTeamPositions = this.getBorderColumnsIndices('last'); // –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞

    this.assignTeamCharacters(playersTeam, playersTeamPositions);
    this.assignTeamCharacters(opponentTeam, opponentTeamPositions);

    this.gamePlay.redrawPositions(this.positionedCharacters);
  }

  // –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–µ—Ä–≤—ã—Ö –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–≤—É—Ö –∫–æ–ª–æ–Ω–æ–∫
  getBorderColumnsIndices(side = 'first') {
    const size = this.gamePlay.boardSize;
    const indices = [];

    for (let row = 0; row < size; row++) {
      const baseIndex = row * size;
      if (side === 'first') {
        // –ü–µ—Ä–≤—ã–µ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞ (–ª–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)
        indices.push(baseIndex); // –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
        indices.push(baseIndex + 1); // –≤—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü
      } else if (side === 'last') {
        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞ (–ø—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)
        indices.push(baseIndex + size - 2); // –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π
        indices.push(baseIndex + size - 1); // –ø–æ—Å–ª–µ–¥–Ω–∏–π
      }
    }
    return indices;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
  assignTeamCharacters(team, positionIndices) {
    const availablePositions = [ ...positionIndices ];
    for (const character of team) {
      if (availablePositions.length === 0) break;
      const randIdx = Math.floor(Math.random() * availablePositions.length);
      const position = availablePositions.splice(randIdx, 1)[0];
      this.charactersMap.set(position, character);
      this.positionedCharacters.push(
        new PositionedCharacter(character, position)
      );
    }
  }
}
